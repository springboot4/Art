<template>
  <BasicModal
     v-bind="$attrs"
     :title="title"
     :loading="confirmLoading"
     :visible="visible"
     :mask-closable="showable"
     @cancel="handleCancel"
  >
    <a-form
        ref="formRef"
        :model="formData"
        :rules="rules"
        :label-col="labelCol"
        :wrapper-col="wrapperCol"
      >
        <a-form-item label="主键" :hidden="true">
          <a-input v-model:value="formData.id" :disabled="showable" />
        </a-form-item>
      #foreach ($column in $columns)
        <a-form-item label="$column.comments" name="$column.name">
          <a-input v-model:value="formData.$column.name" :disabled="showable" placeholder="请输入$column.comments"  allow-clear/>
        </a-form-item>
      #end
      </a-form>
    <template #footer>
      <a-space>
        <a-button @click="handleCancel">取消</a-button>
        <a-button v-if="!showable" :loading="confirmLoading" type="primary" @click="handleOk">保存</a-button>
      </a-space>
    </template>
  </BasicModal>
</template>

<script lang="ts" setup>
  import { BasicModal } from '/@/components/Modal'
  import {nextTick, reactive, Ref, ref} from 'vue'
  import useFormEdit from '/@/hooks/art/useFormEdit'
  import {FormOperationType} from '/@/enums/formOperationType'
  import {FormInstance} from 'ant-design-vue'
  import {add, ${className}DTO, get, update} from '/@/api/'

  const {
    initFormEditType,
    handleCancel,
    labelCol,
    wrapperCol,
    title,
    confirmLoading,
    visible,
    showable,
    formOperationType,
  } = useFormEdit()

  const emits = defineEmits(['ok'])

  const rules = reactive({
    #foreach ($column in $columns)
        $column.name: [{ required: true, message: '请输入$column.comments', trigger: ['blur', 'change'] }],
    #end
  })

  const formRef = ref<FormInstance>()

  let formData: Ref<${className}DTO> = ref({
    #foreach ($column in $columns)
        $column.name: '',
    #end
  })

  /**
   * 表单初始化
   */
  function init(id, operationType: FormOperationType) {
    initFormEditType(operationType)
    resetForm()
    getInfo(id, operationType)
  }

  /**
   * 获取表单信息
   */
  async function getInfo(id, editType: FormOperationType) {
    if ([FormOperationType.EDIT, FormOperationType.SHOW].includes(editType)) {
      confirmLoading.value = true
      await get(id).then((res) => {
        formData.value = res
      })
    }
    confirmLoading.value = false
  }

  /**
   * 保存新增或者编辑
   */
  function handleOk() {
    formRef.value?.validate().then(async () => {
      confirmLoading.value = true
      if (formOperationType.value === FormOperationType.ADD) {
        await add(formData.value)
      } else if (formOperationType.value === FormOperationType.EDIT) {
        await update(formData.value)
      }
      confirmLoading.value = false
      handleCancel()
      emits('ok')
    })
  }

  /**
   * 重置表单字段
   */
  function resetForm() {
    formData = ref({
      #foreach ($column in $columns)
          $column.name: '',
      #end
    })
    nextTick(() => formRef.value?.resetFields())
  }

  /**
   * 暴露子组件init方法
   */
  defineExpose({
    init,
  })

</script>

<style lang="less" scoped></style>
